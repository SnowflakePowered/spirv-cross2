mod callbacks;

use std::env;

use callbacks::SpirvCrossCallbacks;

fn main() {
    let bindings = bindgen::Builder::default()
        .header("spirv-cross-sys/native/wrapper.h")
        .parse_callbacks(Box::new(SpirvCrossCallbacks))
        .allowlist_type("spvc_.*")
        .allowlist_type("Spv.*")
        .allowlist_function("spvc.*")
        .rustified_enum("SpvSourceLanguage_")
        .rustified_enum("SpvExecutionModel_")
        .rustified_enum("SpvAddressingModel_")
        .rustified_enum("SpvMemoryModel_")
        .rustified_enum("SpvExecutionMode_")
        .rustified_enum("SpvStorageClass_")
        .rustified_enum("SpvDim_")
        .rustified_enum("SpvSamplerAddressingMode_")
        .rustified_enum("SpvSamplerFilterMode_")
        .rustified_enum("SpvImageFormat_")
        .rustified_enum("SpvImageChannelOrder_")
        .rustified_enum("SpvImageChannelDataType_")
        .rustified_enum("SpvImageOperandsShift_")
        .rustified_enum("SpvImageOperandsMask_")
        .rustified_enum("SpvFPFastMathModeShift_")
        .rustified_enum("SpvFPFastMathModeMask_")
        .rustified_enum("SpvFPRoundingMode_")
        .rustified_enum("SpvLinkageType_")
        .rustified_enum("SpvAccessQualifier_")
        .rustified_enum("SpvFunctionParameterAttribute_")
        .rustified_enum("SpvDecoration_")
        .rustified_enum("SpvBuiltIn_")
        .rustified_enum("SpvSelectionControlShift_")
        .rustified_enum("SpvSelectionControlMask_")
        .rustified_enum("SpvLoopControlShift_")
        .rustified_enum("SpvLoopControlMask_")
        .rustified_enum("SpvFunctionControlShift_")
        .rustified_enum("SpvFunctionControlMask_")
        .rustified_enum("SpvMemorySemanticsShift_")
        .rustified_enum("SpvMemorySemanticsMask_")
        .rustified_enum("SpvMemoryAccessShift_")
        .rustified_enum("SpvMemoryAccessMask_")
        .rustified_enum("SpvScope_")
        .rustified_enum("SpvGroupOperation_")
        .rustified_enum("SpvKernelEnqueueFlags_")
        .rustified_enum("SpvKernelProfilingInfoShift_")
        .rustified_enum("SpvKernelProfilingInfoMask_")
        .rustified_enum("SpvCapability_")
        .rustified_enum("SpvRayFlagsShift_")
        .rustified_enum("SpvRayFlagsMask_")
        .rustified_enum("SpvRayQueryIntersection_")
        .rustified_enum("SpvRayQueryCommittedIntersectionType_")
        .rustified_enum("SpvRayQueryCandidateIntersectionType_")
        .rustified_enum("SpvFragmentShadingRateShift_")
        .rustified_enum("SpvFragmentShadingRateMask_")
        .rustified_enum("SpvFPDenormMode_")
        .rustified_enum("SpvFPOperationMode_")
        .rustified_enum("SpvQuantizationModes_")
        .rustified_enum("SpvOverflowModes_")
        .rustified_enum("SpvPackedVectorFormat_")
        .rustified_enum("SpvOp_")
        .rustified_enum("spvc_backend")
        .rustified_enum("spvc_capture_mode")
        .rustified_enum("spvc_result")
        .rustified_enum("spvc_resource_type")
        .rustified_enum("spvc_builtin_resource_type")
        .rustified_enum("spvc_basetype")
        .rustified_enum("spvc_msl_platform")
        .rustified_enum("spvc_msl_index_type")
        .rustified_enum("spvc_msl_shader_variable_format")
        .rustified_enum("spvc_msl_shader_variable_rate")
        .rustified_enum("spvc_msl_sampler_coord")
        .rustified_enum("spvc_msl_sampler_filter")
        .rustified_enum("spvc_msl_sampler_mip_filter")
        .rustified_enum("spvc_msl_sampler_address")
        .rustified_enum("spvc_msl_sampler_compare_func")
        .rustified_enum("spvc_msl_sampler_border_color")
        .rustified_enum("spvc_msl_format_resolution")
        .rustified_enum("spvc_msl_chroma_location")
        .rustified_enum("spvc_msl_component_swizzle")
        .rustified_enum("spvc_msl_sampler_ycbcr_model_conversion")
        .rustified_enum("spvc_msl_sampler_ycbcr_range")
        .bitfield_enum("spvc_hlsl_binding_flag_bits")
        .bitfield_enum("spvc_compiler_option")
        .new_type_alias("spvc_hlsl_binding_flags")
        .new_type_alias("HlslBindingFlags")
        .blocklist_type("spvc_bool")
        .new_type_alias("SpvId")
        .new_type_alias("VariableId")
        .new_type_alias("TypeId")
        .new_type_alias("ConstantId")
        .must_use_type("spvc_result")
        .translate_enum_integer_types(true)
        .clang_arg("-Ispirv-cross-sys/native/SPIRV-Cross/")
        .clang_arg("-DSPIRV_CROSS_CLI=OFF")
        .derive_debug(true)
        .derive_partialeq(true)
        .derive_eq(true)
        .derive_hash(true)
        .generate()
        .expect("Unable to generate bindings");
    bindings
        .write_to_file(
            env::current_dir()
                .unwrap()
                .join("spirv-cross-sys/src/bindings.rs"),
        )
        .expect("Couldn't write bindings!");
}
